from sage.all import GF, inverse_mod, EllipticCurve
import binascii
import hashlib
from Crypto.Cipher import AES

p = 231933770389389338159753408142515592951889415487365399671635245679612352781

G = (93808707311515764328749048019429156823177018815962831703088729905542530725, 144188081159786866301184058966215079553216226588404139826447829786378964579)
H = (139273587750511132949199077353388298279458715287916158719683257616077625421, 30737261732951428402751520492138972590770609126561688808936331585804316784)

K = GF(p)
x1 = K(G[0])
y1 = K(G[1])

x2 = K(H[0])
y2 = K(H[1])

# Solve the system to find a and b
a = 0
b = 0

b = 1/(x2-x1)*(y1**2*x2-x1**3*x2 - y2**2*x1 + x2**3*x1)
a = (y1**2 - x1**3 - b)*1/x1
print(f"{a =}")
print(f"{b =}")

det = determinant = 4 * a**3 + 27 * b**2
assert det != 0

E = EllipticCurve(K, [a, b])
G_E = E(93808707311515764328749048019429156823177018815962831703088729905542530725, 144188081159786866301184058966215079553216226588404139826447829786378964579)
H_E = E(139273587750511132949199077353388298279458715287916158719683257616077625421, 30737261732951428402751520492138972590770609126561688808936331585804316784)



# Find flag
iv = binascii.unhexlify("00b7822a196b00795078b69fcd91280d")
cipher = binascii.unhexlify("8233d04a29befd2efb932b4dbac8d41869e13ecba7e5f13d48128ddd74ea0c7085b4ff402326870313e2f1dfbc9de3f96225ffbe58a87e687665b7d45a41ac22")
key = str(a) + str(b)

aes = AES.new(hashlib.sha1(key.encode()).digest()[:16], AES.MODE_CBC, iv=iv)
flag = aes.decrypt(cipher)

print(flag)

# 404CTF{70u735_l35_gr4nd35_p3r50nn3s_0nt_d_@b0rd_373_d35_3nf4n7s}
